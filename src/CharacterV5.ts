import { z } from "zod";

export const Dice = z.strictObject({
  diceCount: z.number().nullable(),
  diceValue: z.number().nullable(),
  diceMultiplier: z.number().nullable(),
  fixedValue: z.number().nullable(),
  diceString: z.string().nullable(),
});

export const Stat = z.strictObject({
  id: z.number(),
  name: z.null(),
  value: z.number().nullable(),
});

export const CreatureStat = z.strictObject({
  statId: z.number(),
  name: z.null(),
  value: z.number().nullable(),
});

export const FeatList = z.strictObject({
  id: z.number(),
  name: z.string(),
  featIds: z.array(z.number()),
});

export const Source = z.strictObject({
  sourceId: z.number(),
  pageNumber: z.number().nullable(),
  sourceType: z.number(),
});

export const Category = z.strictObject({
  id: z.number(),
  entityTypeId: z.number(),
  entityId: z.number(),
  definitionKey: z.string(),
  entityTagId: z.number(),
  tagName: z.string(),
});

export const CreatureRule = z.strictObject({
  creatureGroupId: z.number(),
  monsterTypeId: z.number(),
  maxChallengeRatingId: z.number(),
  levelDivisor: z.number().nullable(),
  monsterIds: z.array(z.number()),
  movementIds: z.array(z.number()),
  sizeIds: z.array(z.number()),
});

export const RacialTraitDefinition = z.strictObject({
  id: z.number(),
  definitionKey: z.string(),
  entityTypeId: z.number(),
  displayOrder: z.number().nullable(),
  name: z.string(),
  description: z.string(),
  snippet: z.string(),
  hideInBuilder: z.boolean(),
  hideInSheet: z.boolean(),
  activation: z.null(),
  sourceId: z.number(),
  sourcePageNumber: z.number().nullable(),
  creatureRules: z.array(CreatureRule),
  spellListIds: z.array(z.never()),
  featureType: z.number(),
  sources: z.array(Source),
  affectedFeatureDefinitionKeys: z.array(z.never()),
  isCalledOut: z.boolean(),
  entityType: z.string(),
  entityID: z.string(),
  entityRaceId: z.number(),
  entityRaceTypeId: z.number(),
  displayConfiguration: z.strictObject({
    RACIALTRAIT: z.union([z.literal(0), z.literal(1)]),
    LANGUAGE: z.union([z.literal(0), z.literal(1)]),
    ABILITYSCORE: z.union([z.literal(0), z.literal(1)]),
    CLASSFEATURE: z.union([z.literal(0), z.literal(1)]),
  }),
  requiredLevel: z.number().nullable(),
  categories: z.array(Category),
});

export const RacialTrait = z.strictObject({
  definition: RacialTraitDefinition,
});

export const TraitSuggestion = z.strictObject({
  id: z.number(),
  description: z.string(),
  diceRoll: z.number(),
});

export const BackgroundDefinition = z.strictObject({
  id: z.number(),
  entityTypeId: z.number(),
  definitionKey: z.string(),
  name: z.string(),
  description: z.string(),
  snippet: z.string(),
  shortDescription: z.string(),
  skillProficienciesDescription: z.string(),
  toolProficienciesDescription: z.string(),
  languagesDescription: z.string(),
  equipmentDescription: z.string(),
  featureName: z.string(),
  featureDescription: z.string(),
  avatarUrl: z.string().nullable(),
  largeAvatarUrl: z.string().nullable(),
  suggestedCharacteristicsDescription: z.string(),
  suggestedProficiencies: z.string().nullable(),
  suggestedLanguages: z.string().nullable(),
  organization: z.string().nullable(),
  contractsDescription: z.string(),
  spellsPreDescription: z.string(),
  spellsPostDescription: z.string(),
  personalityTraits: z.array(TraitSuggestion),
  ideals: z.array(TraitSuggestion),
  bonds: z.array(TraitSuggestion),
  flaws: z.array(TraitSuggestion),
  isHomebrew: z.boolean(),
  sources: z.array(Source),
  spellListIds: z.array(z.string()),
  featList: FeatList.nullable(),
  grantedFeats: z.array(FeatList),
});

export const WeaponProperty = z.strictObject({
  id: z.number(),
  name: z.string(),
  description: z.string(),
  notes: z.string().nullable(),
});

export const WeaponBehaviour = z.strictObject({
  baseItemId: z.number(),
  baseTypeId: z.number(),
  type: z.string(),
  attackType: z.number(),
  categoryId: z.number(),
  properties: z.array(WeaponProperty),
  damage: Dice,
  damageType: z.string(),
  range: z.number(),
  longRange: z.number(),
  isMonkWeapon: z.boolean(),
});

export const Modifier = z.strictObject({
  fixedValue: z.number().nullable(),
  id: z.string(),
  entityId: z.number().nullable(),
  entityTypeId: z.number().nullable(),
  type: z.string(),
  subType: z.string(),
  dice: Dice.nullable(),
  restriction: z.string().nullable(),
  statId: z.number().nullable(),
  requiresAttunement: z.boolean(),
  duration: z.null(),
  friendlyTypeName: z.string(),
  friendlySubtypeName: z.string(),
  isGranted: z.boolean(),
  bonusTypes: z.array(z.number()),
  value: z.number().nullable(),
  availableToMulticlass: z.boolean().nullable(),
  modifierTypeId: z.number(),
  modifierSubTypeId: z.number(),
  componentId: z.number(),
  componentTypeId: z.number(),
  tagConstraints: z.array(z.never()).optional(),
});

export const ItemDefinition = z.strictObject({
  id: z.number(),
  baseTypeId: z.number(),
  entityTypeId: z.number(),
  definitionKey: z.string(),
  canEquip: z.boolean(),
  magic: z.boolean(),
  name: z.string(),
  snippet: z.string().nullable(),
  weight: z.number(),
  weightMultiplier: z.number(),
  capacity: z.string().nullable(),
  capacityWeight: z.number(),
  type: z.string(),
  description: z.string(),
  canAttune: z.boolean(),
  attunementDescription: z.string().nullable(),
  rarity: z.string(),
  isHomebrew: z.boolean(),
  version: z.null(),
  sourceId: z.number().nullable(),
  sourcePageNumber: z.number().nullable(),
  stackable: z.boolean(),
  bundleSize: z.number(),
  avatarUrl: z.string().nullable(),
  largeAvatarUrl: z.string().nullable(),
  filterType: z.string(),
  cost: z.number().nullable(),
  isPack: z.boolean(),
  tags: z.array(z.string()),
  grantedModifiers: z.array(Modifier),
  subType: z.string().nullable(),
  isConsumable: z.boolean(),
  weaponBehaviors: z.array(WeaponBehaviour),
  baseItemId: z.number().nullable(),
  baseArmorName: z.string().nullable(),
  strengthRequirement: z.number().nullable(),
  armorClass: z.number().nullable(),
  stealthCheck: z.number().nullable(),
  damage: Dice.nullable(),
  damageType: z.string().nullable(),
  fixedDamage: z.null(),
  properties: z.array(WeaponProperty).nullable(),
  attackType: z.number().nullable(),
  categoryId: z.number().nullable(),
  range: z.number().nullable(),
  longRange: z.number().nullable(),
  isMonkWeapon: z.boolean(),
  levelInfusionGranted: z.number().nullable(),
  sources: z.array(Source),
  armorTypeId: z.number().nullable(),
  gearTypeId: z.number().nullable(),
  groupedId: z.number().nullable(),
  canBeAddedToInventory: z.boolean(),
  isContainer: z.boolean(),
  isCustomItem: z.boolean(),
  isLegacy: z.boolean(),
});

export const ClassFeature = z.strictObject({
  id: z.number(),
  name: z.string(),
  prerequisite: z.null(),
  description: z.string(),
  requiredLevel: z.number(),
  displayOrder: z.number(),
});

export const LimitedUse = z.strictObject({
  level: z.number().nullable(),
  uses: z.number(),
});

export const LimitedUseMedium = z.strictObject({
  maxUses: z.number(),
  numberUsed: z.number(),
  resetType: z.string(),
  resetTypeDescription: z.string(),
});

export const LimitedUseFull = z.strictObject({
  name: z.null(),
  statModifierUsesId: z.number().nullable(),
  resetType: z.number(),
  numberUsed: z.number(),
  minNumberConsumed: z.number().nullable(),
  maxNumberConsumed: z.number(),
  maxUses: z.number(),
  operator: z.number(),
  useProficiencyBonus: z.boolean(),
  proficiencyBonusOperator: z.number(),
  resetDice: z.null(),
});

export const LevelScale = z.strictObject({
  id: z.number(),
  level: z.number(),
  description: z.string(),
  dice: Dice.nullable(),
  fixedValue: z.number().nullable(),
});

export const ClassFeatureDefinition = z.strictObject({
  id: z.number(),
  definitionKey: z.string(),
  entityTypeId: z.number(),
  displayOrder: z.number(),
  name: z.string(),
  description: z.string(),
  snippet: z.string(),
  activation: z.null(),
  multiClassDescription: z.string(),
  requiredLevel: z.number(),
  isSubClassFeature: z.boolean(),
  limitedUse: z.array(LimitedUse),
  hideInBuilder: z.boolean(),
  hideInSheet: z.boolean(),
  sourceId: z.number(),
  sourcePageNumber: z.number(),
  creatureRules: z.array(CreatureRule),
  levelScales: z.array(LevelScale),
  infusionRules: z.array(z.never()),
  spellListIds: z.array(z.number()),
  classId: z.number(),
  featureType: z.number(),
  sources: z.array(Source),
  affectedFeatureDefinitionKeys: z.array(z.never()),
  entityType: z.string(),
  entityID: z.string(),
  hasItemMappings: z.boolean(),
  grantedFeats: z.array(FeatList),
});

export const ClassFeatureFull = z.strictObject({
  definition: ClassFeatureDefinition,
  levelScale: LevelScale.nullable(),
});

export const Prerequisite = z.strictObject({
  description: z.string(),
  hidePrerequisite: z.boolean(),
  prerequisiteMappings: z.array(
    z.strictObject({
      id: z.number(),
      entityId: z.number(),
      entityTypeId: z.number(),
      type: z.string(),
      subType: z.string(),
      value: z.number().nullable(),
      friendlyTypeName: z.string(),
      friendlySubTypeName: z.string(),
      shouldExclude: z.boolean(),
    }),
  ),
});

export const ClassDefinition = z.strictObject({
  id: z.number(),
  definitionKey: z.string(),
  name: z.string(),
  description: z.string(),
  equipmentDescription: z.string().nullable(),
  parentClassId: z.number().nullable(),
  avatarUrl: z.string().nullable(),
  largeAvatarUrl: z.string().nullable(),
  portraitAvatarUrl: z.string().nullable(),
  moreDetailsUrl: z.string(),
  spellCastingAbilityId: z.number().nullable(),
  sources: z.array(Source),
  classFeatures: z.array(ClassFeature),
  hitDice: z.number(),
  wealthDice: z.null(),
  canCastSpells: z.boolean(),
  knowsAllSpells: z.boolean().nullable(),
  spellPrepareType: z.number().nullable(),
  spellCastingLearningStyle: z.number().nullable(),
  spellContainerName: z.string().nullable(),
  sourcePageNumber: z.number().nullable(),
  subclassDefinition: z.null(),
  isHomebrew: z.boolean(),
  primaryAbilities: z.array(z.never()).nullable(),
  spellRules: z
    .strictObject({
      multiClassSpellSlotDivisor: z.number(),
      isRitualSpellCaster: z.boolean(),
      levelCantripsKnownMaxes: z.array(z.number()),
      levelSpellKnownMaxes: z.array(z.number()),
      levelSpellSlots: z.array(z.array(z.number())),
      multiClassSpellSlotRounding: z.number(),
      levelPreparedSpellMaxes: z.array(z.number()),
    })
    .nullable(),
  prerequisites: z.array(Prerequisite).nullable(),
});

export const Class = z.strictObject({
  id: z.number(),
  entityTypeId: z.number(),
  level: z.number(),
  isStartingClass: z.boolean(),
  hitDiceUsed: z.number(),
  definitionId: z.number(),
  subclassDefinitionId: z.number().nullable(),
  definition: ClassDefinition,
  subclassDefinition: ClassDefinition.nullable(),
  classFeatures: z.array(ClassFeatureFull),
});

export const Activation = z.strictObject({
  activationTime: z.number().nullable(),
  activationType: z.number().nullable(),
});

export const FeatDefinition = z.strictObject({
  id: z.number(),
  entityTypeId: z.number(),
  definitionKey: z.string(),
  name: z.string(),
  description: z.string(),
  snippet: z.string(),
  activation: Activation,
  sourceId: z.number().nullable(),
  sourcePageNumber: z.number().nullable(),
  creatureRules: z.array(CreatureRule),
  prerequisites: z.array(Prerequisite),
  isHomebrew: z.boolean(),
  sources: z.array(Source),
  spellListIds: z.array(z.number()),
  isRepeatable: z.boolean(),
  repeatableParentId: z.null(),
  categories: z.array(Category),
});

export const Feat = z.strictObject({
  componentTypeId: z.number().nullable(),
  componentId: z.number().nullable(),
  definition: FeatDefinition,
  definitionId: z.number(),
});

export const Inventory = z.strictObject({
  id: z.number(),
  entityTypeId: z.number(),
  definition: ItemDefinition,
  definitionId: z.number(),
  definitionTypeId: z.number(),
  displayAsAttack: z.boolean().nullable(),
  quantity: z.number(),
  isAttuned: z.boolean(),
  equipped: z.boolean(),
  equippedEntityTypeId: z.number().nullable(),
  equippedEntityId: z.number().nullable(),
  chargesUsed: z.number(),
  limitedUse: z.union([LimitedUse, LimitedUseMedium]).nullable(),
  containerEntityId: z.number(),
  containerEntityTypeId: z.number(),
  containerDefinitionKey: z.string(),
  currency: z.null(),
  originEntityTypeId: z.null(),
  originEntityId: z.null(),
  originDefinitionKey: z.null(),
});

export const SpellSlot = z.strictObject({
  level: z.number(),
  used: z.number(),
  available: z.number(),
});

export const OptionDefinition = z.strictObject({
  id: z.number(),
  entityTypeId: z.number(),
  name: z.string(),
  description: z.string(),
  snippet: z.string(),
  activation: z.null(),
  sourceId: z.number().nullable(),
  sourcePageNumber: z.number().nullable(),
  creatureRules: z.array(CreatureRule),
  spellListIds: z.array(z.never()),
});

export const Option = z.strictObject({
  componentId: z.number(),
  componentTypeId: z.number(),
  definition: OptionDefinition,
});

export const TagConstraint = z.strictObject({
  id: z.number(),
  parentComponentTypeId: z.number(),
  parentComponentId: z.number(),
  entityModifierId: z.number(),
  entityTagId: z.number(),
  definitionKey: z.string(),
  tagName: z.string(),
});

export const Choice = z.strictObject({
  componentId: z.number(),
  componentTypeId: z.number(),
  id: z.string(),
  parentChoiceId: z.string().nullable(),
  type: z.number(),
  subType: z.number().nullable(),
  optionValue: z.number().nullable(),
  label: z.string().nullable(),
  isOptional: z.boolean(),
  isInfinite: z.boolean(),
  defaultSubtypes: z.array(z.string()),
  displayOrder: z.number().nullable(),
  itemDefinitionKey: z.null(),
  options: z.array(z.never()),
  optionIds: z.array(z.number()),
  tagConstraints: z.array(TagConstraint),
});

export const ChoiceDefinitionOption = z.strictObject({
  id: z.number(),
  label: z.string(),
  description: z.string().nullable(),
  sourceId: z.number().nullable(),
});

export const ChoiceDefinition = z.strictObject({
  id: z.string(),
  options: z.array(ChoiceDefinitionOption),
});

export const AoeType = z
  .union([z.enum(["Cube", "Emanation", "Sphere", "Square"]), z.number()])
  .nullable();

export const Action = z.strictObject({
  componentId: z.number(),
  componentTypeId: z.number(),
  id: z.string(),
  entityTypeId: z.string(),
  limitedUse: LimitedUseFull.nullable(),
  name: z.string(),
  description: z.string(),
  snippet: z.string(),
  abilityModifierStatId: z.number().nullable(),
  onMissDescription: z.string(),
  saveFailDescription: z.string(),
  saveSuccessDescription: z.string(),
  saveStatId: z.number().nullable(),
  fixedSaveDc: z.number().nullable(),
  attackTypeRange: z.number().nullable(),
  actionType: z.number(),
  attackSubtype: z.number().nullable(),
  dice: Dice.nullable(),
  value: z.null(),
  damageTypeId: z.number().nullable(),
  isMartialArts: z.boolean(),
  isProficient: z.boolean(),
  spellRangeType: z.number().nullable(),
  displayAsAttack: z.boolean().nullable(),
  range: z.strictObject({
    range: z.number().nullable(),
    longRange: z.null(),
    aoeType: AoeType.nullable(),
    aoeSize: z.number().nullable(),
    hasAoeSpecialDescription: z.boolean(),
    minimumRange: z.null(),
  }),
  activation: Activation,
  numberOfTargets: z.null(),
  fixedToHit: z.null(),
  ammunition: z.null(),
});

export const HigherLevelDefinition = z.strictObject({
  level: z.number().nullable(),
  typeId: z.number(),
  dice: Dice.nullable(),
  value: z.number().nullable(),
  details: z.string(),
});

export const SpellModifier = Modifier.extend({
  die: Dice,
  count: z.number(),
  durationUnit: z.null(),
  usePrimaryStat: z.boolean(),
  atHigherLevels: z.strictObject({
    higherLevelDefinitions: z.array(HigherLevelDefinition),
    additionalAttacks: z.array(z.never()),
    additionalTargets: z.array(z.never()),
    areaOfEffect: z.array(z.never()),
    duration: z.array(z.never()),
    creatures: z.array(z.never()),
    special: z.array(z.never()),
    points: z.array(z.never()),
    range: z.array(z.never()),
  }),
});

export const SpellCondition = z.strictObject({
  type: z.number(),
  conditionId: z.number(),
  conditionDuration: z.number(),
  durationUnit: z.string(),
  exception: z.string(),
});

export const SpellDefinition = z.strictObject({
  id: z.number(),
  definitionKey: z.string(),
  name: z.string(),
  level: z.number(),
  school: z.string(),
  duration: z.strictObject({
    durationInterval: z.number(),
    durationUnit: z.string().nullable(),
    durationType: z.string(),
  }),
  activation: Activation,
  range: z.strictObject({
    origin: z.enum(["Self", "Ranged", "Touch"]).nullable(),
    rangeValue: z.number().nullable(),
    aoeType: AoeType.nullable(),
    aoeValue: z.number().nullable(),
  }),
  asPartOfWeaponAttack: z.boolean(),
  description: z.string(),
  snippet: z.string().nullable(),
  concentration: z.boolean(),
  ritual: z.boolean(),
  rangeArea: z.null(),
  damageEffect: z.null(),
  components: z.array(z.number()),
  componentsDescription: z.string(),
  saveDcAbilityId: z.number().nullable(),
  healing: z.null(),
  healingDice: z.array(z.never()),
  tempHpDice: z.array(z.never()),
  attackType: z.number().nullable(),
  canCastAtHigherLevel: z.boolean(),
  isHomebrew: z.boolean(),
  version: z.null(),
  sourceId: z.number().nullable(),
  sourcePageNumber: z.number().nullable(),
  requiresSavingThrow: z.boolean(),
  requiresAttackRoll: z.boolean(),
  atHigherLevels: z.strictObject({
    higherLevelDefinitions: z.array(HigherLevelDefinition),
    additionalAttacks: z.array(z.never()),
    additionalTargets: z.array(z.never()),
    areaOfEffect: z.array(z.never()),
    duration: z.array(z.never()),
    creatures: z.array(z.never()),
    special: z.array(z.never()),
    points: z.array(z.never()),
    range: z.array(z.never()),
  }),
  modifiers: z.array(SpellModifier),
  conditions: z.array(SpellCondition),
  tags: z.array(z.string()),
  castingTimeDescription: z.string(),
  scaleType: z.string().nullable(),
  sources: z.array(Source),
  spellGroups: z.array(z.number()),
  isLegacy: z.boolean(),
});

export const Spell = z.strictObject({
  overrideSaveDc: z.null(),
  limitedUse: LimitedUseFull.nullable(),
  id: z.number(),
  entityTypeId: z.number(),
  definition: SpellDefinition,
  definitionId: z.number(),
  prepared: z.boolean(),
  countsAsKnownSpell: z.boolean().nullable(),
  usesSpellSlot: z.boolean(),
  castAtLevel: z.null(),
  alwaysPrepared: z.boolean(),
  restriction: z.string().nullable(),
  spellCastingAbilityId: z.number().nullable(),
  displayAsAttack: z.boolean().nullable(),
  additionalDescription: z.string().nullable(),
  castOnlyAsRitual: z.boolean(),
  ritualCastingType: z.number().nullable(),
  range: z.strictObject({
    origin: z.string(),
    rangeValue: z.number().nullable(),
    aoeType: AoeType.nullable(),
    aoeValue: z.number().nullable(),
  }),
  activation: Activation,
  baseLevelAtWill: z.boolean(),
  atWillLimitedUseLevel: z.null(),
  isSignatureSpell: z.null(),
  componentId: z.number(),
  componentTypeId: z.number(),
  spellListId: z.null(),
});

export const ClassSpells = z.strictObject({
  entityTypeId: z.number(),
  characterClassId: z.number(),
  spells: z.array(Spell),
});

export const CustomItem = z.strictObject({
  id: z.number(),
  name: z.string(),
  description: z.string().nullable(),
  weight: z.number().nullable(),
  cost: z.number().nullable(),
  quantity: z.number(),
  notes: z.string().nullable(),
});

export const Movement = z.strictObject({
  movementId: z.number(),
  speed: z.number(),
  notes: z.string().nullable(),
});

export const Sense = z.strictObject({
  senseId: z.number(),
  notes: z.string(),
});

export const SavingThrow = z.strictObject({
  statId: z.number(),
  bonusModifier: z.null(),
});

export const Skill = z.strictObject({
  skillId: z.number(),
  value: z.number(),
  additionalBonus: z.null(),
});

export const CreatureDefinition = z.strictObject({
  id: z.number(),
  entityTypeId: z.number(),
  name: z.string(),
  alignmentId: z.number(),
  sizeId: z.number(),
  typeId: z.number(),
  armorClass: z.number(),
  armorClassDescription: z.string(),
  averageHitPoints: z.number(),
  hitPointDice: Dice,
  movements: z.array(Movement),
  passivePerception: z.number(),
  isHomebrew: z.boolean(),
  challengeRatingId: z.number(),
  sourceId: z.number().nullable(),
  sourcePageNumber: z.number().nullable(),
  isLegendary: z.boolean(),
  isMythic: z.boolean(),
  hasLair: z.boolean(),
  avatarUrl: z.string().nullable(),
  largeAvatarUrl: z.string().nullable(),
  basicAvatarUrl: z.string().nullable(),
  version: z.null(),
  swarm: z.null(),
  subTypes: z.array(z.never()),
  environments: z.array(z.number()),
  tags: z.array(z.never()),
  sources: z.array(Source),
  stats: z.array(CreatureStat),
  senses: z.array(Sense),
  damageAdjustments: z.array(z.number()),
  conditionImmunities: z.array(z.never()),
  savingThrows: z.array(SavingThrow),
  skills: z.array(Skill),
  languages: z.array(z.never()),
  specialTraitsDescription: z.string(),
  actionsDescription: z.string(),
  reactionsDescription: z.string(),
  legendaryActionsDescription: z.string(),
  mythicActionsDescription: z.string(),
  bonusActionsDescription: z.string(),
  characteristicsDescription: z.null(),
  lairDescription: z.string(),
  languageDescription: z.null(),
  languageNote: z.string(),
  hideCr: z.boolean(),
  isLegacy: z.boolean(),
  statBlockType: z.number(),
  initiative: z.strictObject({
    score: z.number(),
    bonus: z.number(),
  }),
  lairChallengeRatingId: z.null(),
  gear: z.string(),
  slug: z.string(),
});

export const Creature = z.strictObject({
  id: z.number(),
  entityTypeId: z.number(),
  name: z.string().nullable(),
  description: z.string().nullable(),
  isActive: z.boolean(),
  removedHitPoints: z.number(),
  temporaryHitPoints: z.number().nullable(),
  groupId: z.number(),
  definition: CreatureDefinition,
});

export const CharacterValue = z.strictObject({
  typeId: z.number(),
  value: z.union([z.number(), z.string(), z.boolean()]),
  notes: z.string().nullable(),
  valueId: z.string(),
  valueTypeId: z.string(),
  contextId: z.null(),
  contextTypeId: z.null(),
});

export const CampaignCharacter = z.strictObject({
  userId: z.number(),
  username: z.string(),
  characterId: z.number(),
  characterName: z.string(),
  characterUrl: z.string(),
  avatarUrl: z.string().nullable(),
  privacyType: z.number(),
  campaignId: z.null(),
  isAssigned: z.boolean(),
});

export const Campaign = z.strictObject({
  id: z.number(),
  name: z.string(),
  description: z.string(),
  link: z.string(),
  publicNotes: z.string(),
  dmUserId: z.number(),
  dmUsername: z.string(),
  characters: z.array(CampaignCharacter),
});

export const CharacterResponse = z.strictObject({
  id: z.number(),
  success: z.boolean(),
  message: z.string(),
  pagination: z.null(),
  data: z.strictObject({
    id: z.number(),
    userId: z.number(),
    username: z.string(),
    isAssignedToPlayer: z.boolean(),
    readonlyUrl: z.string(),
    decorations: z.strictObject({
      avatarUrl: z.string().nullable(),
      frameAvatarUrl: z.string().nullable(),
      backdropAvatarUrl: z.string().nullable(),
      smallBackdropAvatarUrl: z.string().nullable(),
      largeBackdropAvatarUrl: z.string().nullable(),
      thumbnailBackdropAvatarUrl: z.string().nullable(),
      defaultBackdrop: z.strictObject({
        backdropAvatarUrl: z.string(),
        smallBackdropAvatarUrl: z.string(),
        largeBackdropAvatarUrl: z.string(),
        thumbnailBackdropAvatarUrl: z.string(),
      }),
      avatarId: z.number().nullable(),
      portraitDecorationKey: z.string().nullable(),
      frameAvatarDecorationKey: z.string().nullable(),
      frameAvatarId: z.number().nullable(),
      backdropAvatarDecorationKey: z.string().nullable(),
      backdropAvatarId: z.number().nullable(),
      smallBackdropAvatarDecorationKey: z.string().nullable(),
      smallBackdropAvatarId: z.number().nullable(),
      largeBackdropAvatarDecorationKey: z.string().nullable(),
      largeBackdropAvatarId: z.number().nullable(),
      thumbnailBackdropAvatarDecorationKey: z.string().nullable(),
      thumbnailBackdropAvatarId: z.number().nullable(),
      themeColor: z
        .strictObject({
          themeColorId: z.number(),
          themeColor: z.string(),
          backgroundColor: z.string(),
          name: z.string(),
          raceId: z.null(),
          subRaceId: z.number().nullable(),
          classId: z.number().nullable(),
          tags: z.array(z.string()),
          decorationKey: z.string(),
        })
        .nullable(),
    }),
    name: z.string(),
    socialName: z.string().nullable(),
    gender: z.string().nullable(),
    faith: z.string().nullable(),
    age: z.number().nullable(),
    hair: z.string().nullable(),
    eyes: z.string().nullable(),
    skin: z.string().nullable(),
    height: z.union([z.string(), z.number()]).nullable(),
    weight: z.union([z.string(), z.number()]).nullable(),
    inspiration: z.boolean(),
    baseHitPoints: z.number(),
    bonusHitPoints: z.number().nullable(),
    overrideHitPoints: z.number().nullable(),
    removedHitPoints: z.number(),
    temporaryHitPoints: z.number(),
    currentXp: z.number(),
    alignmentId: z.number().nullable(),
    lifestyleId: z.number().nullable(),
    stats: z.array(Stat),
    bonusStats: z.array(Stat),
    overrideStats: z.array(Stat),
    background: z.strictObject({
      hasCustomBackground: z.boolean(),
      customBackground: z.strictObject({
        id: z.number(),
        entityTypeId: z.number(),
        name: z.string().nullable(),
        description: z.string().nullable(),
        backgroundType: z.number().nullable(),
        featuresBackgroundDefinitionId: z.null(),
        featuresBackground: BackgroundDefinition.nullable(),
        characteristicsBackgroundDefinitionId: z.null(),
        characteristicsBackground: BackgroundDefinition.nullable(),
      }),
      definitionId: z.null(),
      definition: BackgroundDefinition.nullable(),
    }),
    raceDefinitionId: z.null(),
    raceDefinitionTypeId: z.null(),
    race: z.strictObject({
      isSubRace: z.boolean(),
      baseRaceName: z.string(),
      entityRaceId: z.number(),
      entityRaceTypeId: z.number(),
      definitionKey: z.string(),
      fullName: z.string(),
      baseRaceId: z.number(),
      baseRaceTypeId: z.number(),
      description: z.string(),
      avatarUrl: z.string().nullable(),
      largeAvatarUrl: z.string(),
      portraitAvatarUrl: z.string(),
      moreDetailsUrl: z.string(),
      isHomebrew: z.boolean(),
      isLegacy: z.boolean(),
      groupIds: z.array(z.never()),
      type: z.number(),
      supportsSubrace: z.null(),
      subRaceShortName: z.null(),
      baseName: z.string(),
      racialTraits: z.array(RacialTrait),
      weightSpeeds: z.strictObject({
        normal: z.strictObject({
          walk: z.number(),
          fly: z.number(),
          burrow: z.number(),
          swim: z.number(),
          climb: z.number(),
        }),
        encumbered: z.null(),
        heavilyEncumbered: z.null(),
        pushDragLift: z.null(),
        override: z.null(),
      }),
      featIds: z.array(z.never()),
      size: z.null(),
      sizeId: z.number(),
      sources: z.array(Source),
    }),
    notes: z.strictObject({
      allies: z.string().nullable(),
      personalPossessions: z.string().nullable(),
      otherHoldings: z.string().nullable(),
      organizations: z.string().nullable(),
      enemies: z.string().nullable(),
      backstory: z.string().nullable(),
      otherNotes: z.string().nullable(),
    }),
    traits: z.strictObject({
      personalityTraits: z.string().nullable(),
      ideals: z.string().nullable(),
      bonds: z.string().nullable(),
      flaws: z.string().nullable(),
      appearance: z.string().nullable(),
    }),
    preferences: z.strictObject({
      useHomebrewContent: z.boolean(),
      progressionType: z.number(),
      encumbranceType: z.number(),
      ignoreCoinWeight: z.boolean(),
      hitPointType: z.number(),
      showUnarmedStrike: z.boolean(),
      showScaledSpells: z.boolean(),
      primarySense: z.number(),
      primaryMovement: z.number(),
      privacyType: z.number(),
      sharingType: z.number(),
      abilityScoreDisplayType: z.number(),
      enforceFeatRules: z.boolean(),
      enforceMulticlassRules: z.boolean(),
      enableOptionalClassFeatures: z.boolean(),
      enableOptionalOrigins: z.boolean(),
      enableDarkMode: z.boolean(),
      enableContainerCurrency: z.boolean(),
    }),
    configuration: z.strictObject({
      startingEquipmentType: z.number().nullable(),
      abilityScoreType: z.number(),
      showHelpText: z.boolean(),
    }),
    lifestyle: z.string().nullable(),
    inventory: z.array(Inventory),
    currencies: z.strictObject({
      cp: z.number(),
      sp: z.number(),
      gp: z.number(),
      ep: z.number(),
      pp: z.number(),
    }),
    classes: z.array(Class),
    feats: z.array(Feat),
    features: z.null(),
    customDefenseAdjustments: z.array(z.never()),
    customSenses: z.array(z.never()),
    customSpeeds: z.array(z.never()),
    customProficiencies: z.array(z.never()),
    customActions: z.array(z.never()),
    characterValues: z.array(CharacterValue),
    conditions: z.array(z.never()),
    deathSaves: z.strictObject({
      failCount: z.number().nullable(),
      successCount: z.number().nullable(),
      isStabilized: z.boolean(),
    }),
    adjustmentXp: z.number().nullable(),
    spellSlots: z.array(SpellSlot),
    pactMagic: z.array(SpellSlot),
    activeSourceCategories: z.array(z.number()),
    spells: z.strictObject({
      race: z.array(Spell),
      class: z.array(Spell),
      background: z.null(),
      item: z.array(Spell),
      feat: z.array(Spell),
    }),
    options: z.strictObject({
      race: z.array(Option),
      class: z.array(Option),
      background: z.null(),
      item: z.null(),
      feat: z.array(Option),
    }),
    choices: z.strictObject({
      race: z.array(Choice),
      class: z.array(Choice),
      background: z.array(Choice),
      item: z.null(),
      feat: z.array(Choice),
      choiceDefinitions: z.array(ChoiceDefinition).optional(),
      definitionKeyNameMap: z.record(z.string(), z.string()),
    }),
    actions: z.strictObject({
      race: z.array(Action),
      class: z.array(Action),
      background: z.null(),
      item: z.null(),
      feat: z.array(Action),
    }),
    modifiers: z.strictObject({
      race: z.array(Modifier),
      class: z.array(Modifier),
      background: z.array(Modifier),
      item: z.array(Modifier),
      feat: z.array(Modifier),
      condition: z.array(Modifier),
    }),
    classSpells: z.array(ClassSpells),
    customItems: z.array(CustomItem),
    campaign: Campaign.nullable(),
    creatures: z.array(Creature),
    optionalOrigins: z.array(z.never()),
    optionalClassFeatures: z.array(z.never()),
    dateModified: z.string(),
    providedFrom: z.string(),
    canEdit: z.boolean(),
    status: z.number(),
    statusSlug: z.null(),
    campaignSetting: z.null(),
  }),
});
